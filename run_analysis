#R Data cleaning Project

#1:download file
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip")

#unzip file
unzip(zipfile="./data/Dataset.zip",exdir="./data")

#2. Merge the training and the test sets to create one data set.
#set working directory to the location where the UCI HAR Dataset was unzipped
# Read in the data from files
path_rf <- file.path("./data" , "UCI HAR Dataset")

#read files as variables into R
features <- read.table(file.path(path_rf, "features.txt"),header=FALSE); #imports features.txt
activityType <- read.table(file.path(path_rf, "activity_labels.txt"),header=FALSE)  #imports activity_labels.txt
subjectTrain = read.table(file.path(path_rf, "./train/subject_train.txt"),header=FALSE) #imports subject_train.txt
                    
xTrain <- read.table(file.path(path_rf,"./train/x_train.txt"),header=FALSE); #imports x_train.txt
yTrain = read.table(file.path(path_rf,"./train/y_train.txt"), header=FALSE); #imports y_train.txt

#verify colomn names and dimensions
names(subjectTrain)
dim(subjectTrain)
names(features)
dim(features)
names(xTrain)
dim(xTrain)
names(yTrain)
dim(yTrain)

# change column names to the data files above
colnames(activityType) = c('activityId','activityType');
colnames(subjectTrain) = "subjectId";
colnames(xTrain) = features[,2];
colnames(yTrain) = "activityId";

#verify the change
names(activityType)
dim(activityType)

# create the final training set by combining all columns in each file: yTrain, subjectTrain, and xTrain
trainingData = cbind(yTrain,subjectTrain,xTrain);
#view trainingData variables and data types
str(trainingData) 

# Read in the test data
subjectTest = read.table(file.path(path_rf,"./test/subject_test.txt"),header=FALSE); #imports subject_test.txt
xTest = read.table(file.path(path_rf,"./test/x_test.txt"),header=FALSE); #imports x_test.txt
yTest = read.table(file.path(path_rf,"./test/y_test.txt"),header=FALSE); #imports y_test.txt

#check the newly created variables
names(yTest)
dim(xTest)
dim(yTest)
dim(subjectTest)

# add column names to the test data files
colnames(subjectTest) = "subjectId";
colnames(xTest) = features[,2];
colnames(yTest) = "activityId";

# Create the final test set by combining the xTest, yTest and subjectTest data
testData = cbind(yTest,subjectTest,xTest);

# add training and test data to create a final data set
finalData = rbind(trainingData,testData);

# Create a vector for the column names from the finalData which will be used to compute the stat: mean() & stddev() columns
colNames = colnames(finalData);
str(colNames) # view names

# Extract the mean and standard deviation for each measurement.
# Create a logicalVector: TRUE values for the ID, mean() & stddev() columns

logicalVector = (grepl("activity..",colNames) | grepl("subject..",colNames) | grepl("-mean..",colNames) & !grepl("-meanFreq..",colNames) & !grepl("mean..-",colNames) | grepl("-std..",colNames) & !grepl("-std()..-",colNames));
# Subset finalData table based on the logicalVector to keep columns TRUE
finalData = finalData[logicalVector==TRUE];

# Merge the finalData set with the acitivityType table to include descriptive activity names
finalData = merge(finalData,activityType,by='activityId',all.x=TRUE);

# Updating the colNames vector to include the new column names after merge
colNames = colnames(finalData);

#Appropriately label the data set with descriptive activity names.

for (i in 1:length(colNames))
{
    colNames[i] = gsub("\\()","",colNames[i])
    colNames[i] = gsub("-std$","StdDev",colNames[i])
    colNames[i] = gsub("-mean","Mean",colNames[i])
    colNames[i] = gsub("^(t)","time",colNames[i])
    colNames[i] = gsub("^(f)","freq",colNames[i])
    colNames[i] = gsub("([Gg]ravity)","Gravity",colNames[i])
    colNames[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i])
    colNames[i] = gsub("[Gg]yro","Gyro",colNames[i])
    colNames[i] = gsub("AccMag","AccMagnitude",colNames[i])
    colNames[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i])
    colNames[i] = gsub("JerkMag","JerkMagnitude",colNames[i])
    colNames[i] = gsub("GyroMag","GyroMagnitude",colNames[i])
};

# Reassigning the new descriptive column names to the finalData set
colnames(finalData) = colNames;
names(finalData)
dim(finalData)

# Create a tidy data set  with the average of each variable for each activity and 
#each subject. Create a new table, finalDataNoActivityType without the activityType column
finalDataNoActivityType = finalData[,names(finalData) != 'activityType'];

# Summarizing the finalDataNoActivityType table to include just the mean of each variable for each activity and each subject
tidyData = aggregate(finalDataNoActivityType[,names(finalDataNoActivityType) != c('activityId','subjectId')],by=list(activityId=finalDataNoActivityType$activityId,subjectId = finalDataNoActivityType$subjectId),mean);
# Merging the tidyData with activityType to include descriptive acitvity names
tidyData = merge(tidyData,activityType,by='activityId',all.x=TRUE);
names(tidyData)
# Export the tidyData set with comma separators
write.table(tidyData, './data/tidyData.txt',row.names=FALSE,sep=',');

#view and verity the content of tidyData.txt

vieWTidy <- read.table("./data/tidyData.txt",sep=',',header=TRUE); #
names(vieWTidy)
dim(vieWTidy)
